//--------------------------------------
//--- 010 Editor v5.0 Binary Template
//
// File:     mm3cmp.bt
// Author:   Daniel Stien <daniel@stien.org>
// Revision: 2014-12-09
// Purpose:  Midtown Madness 3 car mesh package
//--------------------------------------

typedef enum <uint32> {
  VERSION_109 = 109,
  VERSION_114 = 114,
  VERSION_115 = 115,
} Version;

typedef enum <uint16> {
  NODE_TYPE_0         = 0x00, // No content/EOF
  NODE_TYPE_TRANSFORM = 0x01,
  NODE_TYPE_MESH1     = 0x02,
  NODE_TYPE_AXIS      = 0x03,
  NODE_TYPE_LIGHT     = 0x04,
  NODE_TYPE_SMOKE     = 0x05,
  NODE_TYPE_MESH2     = 0x06,
  NODE_TYPE_MESH3     = 0x07, // Shadow?
  NODE_TYPE_MESH4     = 0x08, // Shadow?
} NodeType;

typedef enum <byte> {
  BYTEBOOL_FALSE = 0x0,
  BYTEBOOL_TRUE  = 0x1
} ByteBool;

typedef struct {
  float x, y, z;
} Vertex3f;

typedef struct {
  Vertex3f min, max;
} BoundBox;

typedef struct {
  float r, g, b, a;
} Color;

typedef struct {
  int x : 11;
  int y : 11;
  int z : 10;
  int16 rem; // Normals
  int16 d[9];
} Vertex <read=ReadVertex>;

// Vertex summary.
string ReadVertex(Vertex &v)
{
  string s;
  SPrintf(s, "%d, %d, %d", v.x, v.y, v.z);
  return s;
}

typedef struct {
  uint16 type;
  switch (type) {
    case 0x0001:
    case 0x0101:
    case 0x0201:
    case 0x0301:
    case 0x0501:
    case 0x0701:
    case 0x0901:
    case 0x0A01:
    case 0x0B01:
      uint16 indices[12];
      break;
    case 0x0002:
    case 0x0003:
    case 0x0006:
      uint16 indices[3]; // 14?
      break;
    case 0x0004:
      uint16 indices[10]; // was: 20
      break;
    case 0x0005:
      uint16 indices[7];
      break;
    case 0x000A:
      ubyte indices[23];
      break;
    case 0x6001:
      uint16 indices[9];
      break;
    case 0x8801:
      uint16 indices[7];
      break;
    default:
      //MessageBox(idOk, "Warning", "Unknown primitive type for '%s': 0x%02X", path1, type);
      break;
  }
} Primitive;

typedef struct {
  float f1;
  byte d[24];
} MeshExtra;

typedef struct (Version version) {
  uint32   meshSectionLength;

  if (!meshSectionLength) {
    break;
  }

  local int meshSectionStart = FTell();

  float    unknown2; // NAE
  BoundBox aabb;
  uint32   numVertices1; // NAE
  uint32   numVertexRefs;
  uint32   unknown10; // NAE
  uint32   unknown11; // NAE
  uint32   unknown12; // NAE

  if (version >= VERSION_115) {
    Color    color;
  }
  else {
    float    alpha;
  }

  string   path;

  ByteBool    hasVertexRefs;
  if (hasVertexRefs == BYTEBOOL_TRUE) { // Draw triangles in addition to the vertices.
    uint32   unknown15; // NAE
    uint32   vertexRefsSectionLength; // == numVertexRefs * sizeof(uint16)
    uint16   vertexRefs[numVertexRefs];
  }
  uint16   unknown33; // NAE
  uint16   unknown34; // NAE
  ubyte    unkonwn35; // NAE
  uint32   numVertices2;
  if (numVertices1 != numVertices2) {
    MessageBox(idOk, "Warning", "numVertices1 (%u) != numVertices2 (%u) in '%s'", numVertices1, numVertices2, name);
  }
  if (numVertices2 < 10) {
    MessageBox(idOk, "Tiny mesh", "Less than 10 vertices (%u) in '%s'", numVertices2, name);
  }
  uint32   vertexStride;
  uint32   verticesSectionLength; // == numVertices * vertexStride
  uint32   unknown29; // NAE
  Vertex   vertices[numVertices2];

/*
  uint32 numPrimitives;
  Primitive primitives[numPrimitives]<optimize=false>;
  ByteBool hasExtraSection;

  if (hasExtraSection) {
    byte extraPadding[3];
    uint32 numExtraUnknown;
    MeshExtra extraElements[numExtraUnknown];
  }
*/

  local int meshSectionLeft = meshSectionLength - (FTell() - meshSectionStart);
  if (meshSectionLeft > 0) {
    ubyte unknown99[meshSectionLeft];
  }
  else if (meshSectionLeft < 0) {
    MessageBox(idOk, "Warning", "Read past meshSectionLength (%d)", meshSectionLeft);
  }
} Mesh;

typedef struct (Version version) {
  ByteBool meshFollows;
  if (meshFollows) {
    string path;
    Mesh   mesh(version);
  }
} MeshContainer <read=ReadMeshContainer>;

// MeshContainer summary.
string ReadMeshContainer(MeshContainer &c)
{
  string s;
  if (c.meshFollows) {
    SPrintf(s, "'%s'", FileNameGetBase(c.path));
  }
  else {
    s = "---";
  }

  return s;
}

typedef struct (Version version, NodeType type) {
  ulong    unknown1;
  ulong    unknown2;
  ulong    unknown3;
  ulong    unknown4;

  if (type == NODE_TYPE_MESH2) {
    BoundBox boundBox1;
  }

  local int i, maxMeshes = 3;
  if (unknown1) {
    maxMeshes = 2;
  }
  for (i = 0; i < maxMeshes; i++) {
    MeshContainer meshContainer(version);
    if (!meshContainer.meshFollows) {
      break;
    }
  }
} NodeDataMesh12;

typedef struct {
MessageBox(idOk, "Warning", "Got mesh3/4!");
  Mesh mesh;
} NodeDataMesh34;

typedef struct (Version version) {
  ulong    unknown1; // Nil
  BoundBox boundBox;
  ulong    unknown2; // 1
  ushort   unknown3; // Nil
  ubyte    unknown4; // 1

  if (version >= VERSION_114) {
    string   materialPath;
    ubyte    data1[112]; // Matrix?
    ubyte    data2[441-12];
  }
  else {
    ubyte    data1[111];
    ubyte    date2[442-12];
  }

  float    unknowns[3];
  ulong    unknown5;
  ulong    unknown6;
} NodeDataMaterial;

typedef struct {
  float    unknown1[29];
  int32    unknown2;
  BoundBox boundBox;
} NodeDataTransform;

typedef struct {
  uint32 unknown1;
  string name;
  float  unknown2[36];
} NodeDataAxis;

typedef struct (Version version) {
  uint32 unknown1;
  uint32 unknown2;

  if (version >= VERSION_114) {
    float  unknown3[8];
  }
  else {
    float  unknown3[6];
  }
} NodeDataLight;

typedef struct (Version version) {
  NodeType type;
  uint16   unk;
  string   name;

  if (unk != 0x100 && unk != 0) {
    MessageBox(idOk, "Warning", "Unk == 0x%04X", unk);
  }

  if (unk) {
    MessageBox(idOk, "Warning", "Unk is set!");
  }

  if (unk == 0x100) {
    NodeDataMesh34 data;
  }
  else {
    switch(type) {
      case NODE_TYPE_0:
        break;
      case NODE_TYPE_TRANSFORM:
        NodeDataTransform data;
        break;
      case NODE_TYPE_MESH1:
      case NODE_TYPE_MESH2:
        NodeDataMesh12 data(version, type);
        break;
      case NODE_TYPE_AXIS:
        if (name != "end") {
          NodeDataAxis data;
        }
        break;
      case NODE_TYPE_LIGHT:
        NodeDataLight data(version);
        break;
      case NODE_TYPE_SMOKE:
        break;
      case NODE_TYPE_MESH3:
      case NODE_TYPE_MESH4:
        NodeDataMesh34 data;
        break;
      default:
        MessageBox(idOk, "Warning", "Unknown node type for '%s': 0x%02X", name, type);
        ubyte unkown[FileSize() - FTell()];
    }
  }

  // Don't read children count for leaf nodes.
  if (!FEof()
      && type != NODE_TYPE_LIGHT
      && type != NODE_TYPE_MESH1
      && type != NODE_TYPE_MESH2
      && !(type == NODE_TYPE_AXIS && name == "end")) {
    uint32 numChildren;
    struct Node; // Forward declare.
    Node   children(version)[numChildren] <optimize=false>;
  }
} Node <read=ReadNode>;

// Node summary.
string ReadNode(Node &n)
{
  string s;
  SPrintf(s, "%s: '%s'", EnumToString(n.type), n.name);
  return s;
}

typedef struct {
  uint32  unknown0;
  Version version;
  string  name;
  NodeDataMaterial material(version);
  uint32  numChildren;
  Node    children(version)[numChildren] <optimize=false>;
} RootNode;

RootNode root <open=true>;
